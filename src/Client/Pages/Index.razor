@page "/"
@inject HttpClient Http

<h4>Validation Sample</h4>

<hr class="mb-5" />

@if (!string.IsNullOrEmpty(Result.Message))
{
    if (Result.IsSuccessful)
    {
        <div class="alert alert-success" role="alert">
            @Result.Message
        </div>
    }
    else
    {
        <div class="alert alert-danger" role="alert">
            @Result.Message
        </div>
    }
}

<EditForm Model="@Person" OnValidSubmit="@SubmitValidForm">
    <ServerValidator @ref="serverValidator" />
    <FluentValidationValidator />
    <ValidationSummary />

    <p>
        <label>Name: </label>
        <InputText @bind-Value="@Person.Name" />
        <ValidationMessage For="@(() => Person.Name)" />
    </p>

    <p>
        <label>Age: </label>
        <InputNumber @bind-Value="@Person.Age" />
        <ValidationMessage For="@(() => Person.Age)" />
    </p>

    <p>
        <label>Email Address: </label>
        <InputText @bind-Value="@Person.EmailAddress" />
        <ValidationMessage For="@(() => Person.EmailAddress)" />
    </p>

    <button type="submit">Save</button>

</EditForm>

@code {
    private ServerValidator serverValidator;
    Person Person { get; set; } = new Person() { Name = "Isadora Jarr", Age = 39, EmailAddress = "im@nonymous.com" };
    PersonResult Result { get; set; } = new PersonResult();

    async Task SubmitValidForm()
    {
        //make data invalid
        // Person.Age = -1;

        var response = await Http.PostAsJsonAsync("api/person/create", Person);
        Result = await response.Content.ReadFromJsonAsync<PersonResult>();

        if (!response.IsSuccessStatusCode)
        {
            serverValidator.DisplayErrors(Result.Errors);
            //Result = await response.Content.ReadFromJsonAsync<PersonResult>();
        }
        else
        {
            //var errors = await response.Content.ReadFromJsonAsync<Dictionary<string, List<string>>>();
        }
    }
}